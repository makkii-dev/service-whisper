{"id":"../node_modules/bs64/lib/bs64.js","dependencies":[{"name":"/home/chengchen/WorkSpace/learn/services_whisper/html/package.json","includedInParent":true,"mtime":1585290484096},{"name":"/home/chengchen/WorkSpace/learn/services_whisper/node_modules/bs64/package.json","includedInParent":true,"mtime":1585205630424},{"name":"convert-string","loc":{"line":10,"column":26},"parent":"/home/chengchen/WorkSpace/learn/services_whisper/node_modules/bs64/lib/bs64.js","resolved":"/home/chengchen/WorkSpace/learn/services_whisper/node_modules/convert-string/convert-string.js"}],"generated":{"js":"!function(globals) {\n'use strict'\n\nvar base64 = {} //exports\n\nvar convertString = null\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = base64\n  convertString = require('convert-string')\n} else {\n  globals.bs64 = base64\n  convertString = globals.convertString\n}\n\nvar base64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nbase64.encode = function(input) {\n  var bytes = null\n  if (typeof input == 'string')\n    bytes = convertString.UTF8.stringToBytes(input)\n  else if (Array.isArray(input))\n    bytes = input\n  else\n    throw new Error('Invalid input. Must be a string or an array of bytes.')\n\n  // Use browser-native function if it exists, NOPE: doesn't support outside of latin range. Lame.\n  //if (typeof btoa == \"function\") return btoa(convertString.UTF8.bytesToString(bytes)); \n\n  for(var base64 = [], i = 0; i < bytes.length; i += 3) {\n    var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 <= bytes.length * 8)\n        base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n      else base64.push(\"=\");\n    }\n  }\n\n  return base64.join(\"\");\n}\n\nbase64.decode = function(str) {\n  if (typeof str != 'string') throw new Error('Invalid input. Must be a string.')\n\n  // Use browser-native function if it exists, NOPE: ONLY LATIN CHARS, Lame\n  //if (typeof atob == \"function\") return Binary.stringToBytes(atob(base64));\n\n  var bytes = []\n\n  // Remove non-base-64 characters\n  var base64 = str.replace(/[^A-Z0-9+\\/]/ig, \"\");\n\n  for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {\n    if (imod4 == 0) continue;\n    bytes.push(((base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |\n                     (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n  }\n\n  return bytes;\n}\n\n\n\n}(this);"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/bs64/lib/bs64.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../node_modules/bs64/lib/bs64.js":"!function(globals) {\n'use strict'\n\nvar base64 = {} //exports\n\nvar convertString = null\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = base64\n  convertString = require('convert-string')\n} else {\n  globals.bs64 = base64\n  convertString = globals.convertString\n}\n\nvar base64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nbase64.encode = function(input) {\n  var bytes = null\n  if (typeof input == 'string')\n    bytes = convertString.UTF8.stringToBytes(input)\n  else if (Array.isArray(input))\n    bytes = input\n  else\n    throw new Error('Invalid input. Must be a string or an array of bytes.')\n\n  // Use browser-native function if it exists, NOPE: doesn't support outside of latin range. Lame.\n  //if (typeof btoa == \"function\") return btoa(convertString.UTF8.bytesToString(bytes)); \n\n  for(var base64 = [], i = 0; i < bytes.length; i += 3) {\n    var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 <= bytes.length * 8)\n        base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n      else base64.push(\"=\");\n    }\n  }\n\n  return base64.join(\"\");\n}\n\nbase64.decode = function(str) {\n  if (typeof str != 'string') throw new Error('Invalid input. Must be a string.')\n\n  // Use browser-native function if it exists, NOPE: ONLY LATIN CHARS, Lame\n  //if (typeof atob == \"function\") return Binary.stringToBytes(atob(base64));\n\n  var bytes = []\n\n  // Remove non-base-64 characters\n  var base64 = str.replace(/[^A-Z0-9+\\/]/ig, \"\");\n\n  for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {\n    if (imod4 == 0) continue;\n    bytes.push(((base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |\n                     (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n  }\n\n  return bytes;\n}\n\n\n\n}(this);"},"lineCount":64}},"error":null,"hash":"2584dd11503addfa437fead6fc91a0d2","cacheData":{"env":{}}}